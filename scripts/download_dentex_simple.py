#!/usr/bin/env python3
"""
Script simplifi√© pour t√©l√©charger le dataset DENTEX sur Colab
Version optimis√©e pour Google Colab avec gestion d'erreurs
"""

import os
import json
import shutil
from pathlib import Path
import yaml
import sys

def fix_colab_environment():
    """Corrige l'environnement Colab pour √©viter les probl√®mes de chemins"""
    print("üîß Correction de l'environnement...")

    current_dir = Path.cwd()
    print(f"üìç R√©pertoire actuel: {current_dir}")

    # V√©rifier si on est dans une structure imbriqu√©e
    path_parts = current_dir.parts
    project_name = 'EvaDentalAI_Yolo'

    # Compter combien de fois le projet appara√Æt dans le chemin
    nested_count = path_parts.count(project_name)
    print(f"üìä Niveau d'imbrication d√©tect√©: {nested_count}")

    if nested_count > 1:
        print("üîç Structure imbriqu√©e d√©tect√©e, recherche du r√©pertoire racine...")

        # Trouver le premier (le plus externe) r√©pertoire du projet
        root_candidates = []
        for i, part in enumerate(path_parts):
            if part == project_name:
                # Construire le chemin jusqu'√† ce niveau
                candidate_path = Path(*path_parts[:i+1])
                print(f"   Candidat {len(root_candidates)}: {candidate_path}")
                root_candidates.append(candidate_path)

        if root_candidates:
            # Prendre le PREMIER (le plus externe) qui contient les fichiers du projet
            root_dir = None
            for candidate in root_candidates:
                if (candidate / 'scripts').exists() and (candidate / 'data').exists():
                    root_dir = candidate
                    break

            # Si aucun candidat valide trouv√©, prendre le premier candidat (le plus externe)
            if root_dir is None and root_candidates:
                root_dir = root_candidates[0]

            print(f"üéØ R√©pertoire racine s√©lectionn√©: {root_dir}")

            if root_dir and str(current_dir) != str(root_dir):
                print(f"üìÅ Navigation vers: {root_dir}")
                os.chdir(root_dir)
                print("‚úÖ Navigation termin√©e")
        else:
            print("‚ö†Ô∏è Aucun r√©pertoire racine trouv√©")
    else:
        print("‚úÖ Structure de r√©pertoire normale d√©tect√©e")

    final_dir = Path.cwd()
    print(f"üèÅ R√©pertoire final: {final_dir}")

    # V√©rifier la structure
    if (final_dir / 'scripts').exists() and (final_dir / 'data').exists():
        print("‚úÖ Structure de projet valide")
    else:
        print("‚ö†Ô∏è Structure de projet incompl√®te")

    return final_dir

def download_dentex_simple():
    """T√©l√©chargement simplifi√© du dataset DENTEX"""

    print("ü¶∑ T√©l√©chargement DENTEX - Version Simplifi√©e")
    print("=" * 50)

    # Corriger l'environnement Colab en premier
    fix_colab_environment()

    try:
        from datasets import load_dataset
        from PIL import Image
        import numpy as np
    except ImportError:
        print("‚ùå D√©pendances manquantes. Installez avec:")
        print("!pip install datasets pillow")
        return False

    # Cr√©er la structure des r√©pertoires avec gestion d'erreurs
    try:
        output_dir = Path("data/dentex")
        for split in ['train', 'val', 'test']:
            (output_dir / split / 'images').mkdir(parents=True, exist_ok=True)
            (output_dir / split / 'labels').mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des r√©pertoires: {e}")
        return False
    
    print("üì• T√©l√©chargement du dataset DENTEX...")
    print("Source: https://huggingface.co/datasets/ibrahimhamamci/DENTEX")
    
    try:
        # T√©l√©charger le dataset avec options de s√©curit√©
        print("üîÑ Tentative de t√©l√©chargement du dataset DENTEX...")
        dataset = load_dataset("ibrahimhamamci/DENTEX",
                              trust_remote_code=True,
                              download_mode="force_redownload")
        print("‚úÖ Dataset t√©l√©charg√© avec succ√®s!")

        # Afficher les informations
        print(f"üìä Informations du dataset:")
        for split_name, split_data in dataset.items():
            print(f"  {split_name}: {len(split_data)} images")

        # Traiter chaque split
        processed_counts = {}

        for split_name, split_data in dataset.items():
            if split_name not in ['train', 'validation', 'test']:
                continue

            # Mapper les noms de splits
            yolo_split = 'val' if split_name == 'validation' else split_name

            print(f"üìÅ Traitement du split: {split_name} -> {yolo_split}")

            processed_count = 0

            for i, item in enumerate(split_data):
                try:
                    # Extraire l'image
                    image = item['image']

                    # Sauvegarder l'image
                    image_filename = f"{yolo_split}_{i:04d}.jpg"
                    image_path = output_dir / yolo_split / 'images' / image_filename
                    image.save(image_path, 'JPEG')

                    # Traiter les annotations si disponibles
                    if 'objects' in item and item['objects']:
                        annotations = process_annotations(item['objects'], image.size)

                        # Sauvegarder les annotations YOLO
                        label_filename = f"{yolo_split}_{i:04d}.txt"
                        label_path = output_dir / yolo_split / 'labels' / label_filename

                        with open(label_path, 'w') as f:
                            for ann in annotations:
                                f.write(f"{ann['class_id']} {ann['x_center']:.6f} {ann['y_center']:.6f} {ann['width']:.6f} {ann['height']:.6f}\n")

                    processed_count += 1

                    if (i + 1) % 100 == 0:
                        print(f"  Trait√© {i + 1}/{len(split_data)} images")

                except Exception as e:
                    print(f"  ‚ö†Ô∏è  Erreur sur l'image {i}: {e}")
                    continue

            processed_counts[yolo_split] = processed_count
            print(f"‚úÖ {yolo_split}: {processed_count} images trait√©es")

        # Cr√©er la configuration YOLO
        create_yolo_config(output_dir, processed_counts)

        print("\n‚úÖ Dataset DENTEX pr√©par√© avec succ√®s!")
        print("üìÅ Structure cr√©√©e:")
        abs_path = Path.cwd() / output_dir
        print(f"   {abs_path}/train/")
        print(f"   {abs_path}/val/")
        print(f"   {abs_path}/test/")
        print(f"   {abs_path}/data.yaml")

        # V√©rifier que le fichier de configuration existe
        config_file = abs_path / 'data.yaml'
        if config_file.exists():
            print("‚úÖ Fichier de configuration cr√©√© avec succ√®s")
        else:
            print("‚ö†Ô∏è  Fichier de configuration non trouv√©")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
        print("üí° Cr√©ation d'un dataset de test alternatif...")

        # Essayer une m√©thode alternative de t√©l√©chargement
        success = download_dentex_alternative(output_dir)
        if not success:
            create_test_dataset(output_dir)
        return True

def download_dentex_alternative(output_dir):
    """M√©thode alternative de t√©l√©chargement qui √©vite les probl√®mes de glob"""
    print("üîÑ Tentative de t√©l√©chargement alternatif...")

    try:
        import requests
        from io import BytesIO
        from PIL import Image
        import zipfile
        import tempfile

        # URL alternative pour DENTEX (si disponible)
        # Cette m√©thode t√©l√©charge directement sans utiliser les patterns probl√©matiques

        print("‚ö†Ô∏è T√©l√©chargement alternatif non impl√©ment√© pour cette version")
        print("üí° Utilisation du dataset de test √† la place")
        return False

    except Exception as e:
        print(f"‚ùå Erreur m√©thode alternative: {e}")
        return False

def process_annotations(objects, image_size):
    """Traite les annotations DENTEX pour le format YOLO"""
    annotations = []
    img_width, img_height = image_size
    
    for obj in objects:
        # Extraire les informations de l'objet
        if 'bbox' in obj:
            bbox = obj['bbox']
            x_min, y_min, x_max, y_max = bbox
            
            # Convertir en format YOLO (normalis√©)
            x_center = (x_min + x_max) / 2 / img_width
            y_center = (y_min + y_max) / 2 / img_height
            width = (x_max - x_min) / img_width
            height = (y_max - y_min) / img_height
            
            # Mapper la classe de diagnostic
            class_id = map_diagnosis_class(obj)
            
            if class_id is not None:
                annotations.append({
                    'class_id': class_id,
                    'x_center': x_center,
                    'y_center': y_center,
                    'width': width,
                    'height': height
                })
    
    return annotations

def map_diagnosis_class(obj):
    """Mappe les classes de diagnostic DENTEX vers nos classes YOLO"""
    if 'category' in obj:
        category = obj['category']
        
        # Mapper selon les cat√©gories DENTEX
        if category in ['caries', 'deep_caries']:
            return 1  # cavity
        elif category == 'periapical_lesion':
            return 3  # lesion
        elif category == 'impacted_tooth':
            return 0  # tooth (dent incluse)
    
    return None

def create_yolo_config(output_dir, processed_counts):
    """Cr√©e le fichier de configuration YOLO pour DENTEX avec chemins absolus"""
    # Utiliser des chemins absolus pour √©viter les probl√®mes de r√©pertoires
    abs_path = Path.cwd() / output_dir

    config = {
        'path': str(abs_path),  # Chemin absolu vers le r√©pertoire dataset
        'train': 'train/images',
        'val': 'val/images',
        'test': 'test/images',
        'names': {
            0: "tooth",      # Dent normale/incluse
            1: "cavity",     # Carie (caries + deep_caries)
            2: "implant",    # Implant (pas dans DENTEX, pour compatibilit√©)
            3: "lesion",     # L√©sion (periapical_lesion)
            4: "filling"     # Plombage (pas dans DENTEX, pour compatibilit√©)
        },
        'nc': 5,
        'description': 'DENTEX Dataset - Panoramic Dental X-rays',
        'source': 'https://huggingface.co/datasets/ibrahimhamamci/DENTEX',
        'license': 'CC-BY-NC-SA-4.0',
        'version': '1.0'
    }

    config_path = abs_path / 'data.yaml'
    with open(config_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)

    print(f"‚úÖ Configuration YOLO cr√©√©e: {config_path}")
    print(f"üìÅ Chemins utilis√©s:")
    print(f"   Train: {abs_path}/train/images")
    print(f"   Val: {abs_path}/val/images")
    print(f"   Test: {abs_path}/test/images")

def create_test_dataset(output_dir):
    """Cr√©e un dataset de test minimal si le t√©l√©chargement √©choue"""
    print("üîß Cr√©ation d'un dataset de test...")
    
    # Cr√©er quelques images de test
    from PIL import Image
    import numpy as np
    
    for split in ['train', 'val', 'test']:
        for i in range(5):
            # Cr√©er une image de test
            img = Image.new('RGB', (640, 640), color='white')
            img_path = output_dir / split / 'images' / f"{split}_{i:04d}.jpg"
            img.save(img_path)
            
            # Cr√©er un label de test
            label_path = output_dir / split / 'labels' / f"{split}_{i:04d}.txt"
            with open(label_path, 'w') as f:
                f.write("0 0.5 0.5 0.1 0.1\n")  # Une dent au centre
    
    # Cr√©er la configuration
    create_yolo_config(output_dir, {'train': 5, 'val': 5, 'test': 5})
    
    print("‚úÖ Dataset de test cr√©√©!")

if __name__ == "__main__":
    success = download_dentex_simple()
    if success:
        print("\nüöÄ Utilisation:")
        abs_config = Path.cwd() / "data" / "dentex" / "data.yaml"
        print(f"   python scripts/train_model.py --config {abs_config}")
        print("   ou depuis Colab:")
        print(f"   !python scripts/train_model.py --config {abs_config}")
    else:
        print("\n‚ùå √âchec du t√©l√©chargement")
