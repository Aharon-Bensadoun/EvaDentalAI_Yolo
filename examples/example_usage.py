#!/usr/bin/env python3
"""
Exemples d'utilisation d'EvaDentalAI
D√©montre les diff√©rentes fa√ßons d'utiliser le syst√®me
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

from scripts.predict import DentalPredictor
from ultralytics import YOLO
import cv2
import numpy as np
import matplotlib.pyplot as plt

def example_basic_prediction():
    """Exemple de pr√©diction basique"""
    print("üîç Exemple 1: Pr√©diction basique")
    print("-" * 40)
    
    # Charger le mod√®le
    model_path = "models/best.pt"
    if not Path(model_path).exists():
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        print("üí° Entra√Ænez d'abord un mod√®le avec: python scripts/train_model.py")
        return
    
    # Initialiser le pr√©dicteur
    predictor = DentalPredictor(model_path)
    
    # Trouver une image de test
    test_images = list(Path("data/processed/test/images").glob("*.jpg"))
    if not test_images:
        print("‚ùå Aucune image de test trouv√©e")
        print("üí° G√©n√©rez d'abord un dataset avec: python scripts/prepare_dataset.py")
        return
    
    test_image = str(test_images[0])
    print(f"üì∏ Analyse de: {Path(test_image).name}")
    
    # Pr√©diction
    prediction = predictor.predict_image(test_image, conf_threshold=0.25)
    
    if prediction:
        print(f"‚úÖ {prediction['total_detections']} d√©tection(s) trouv√©e(s)")
        print(f"‚è±Ô∏è  Temps: {prediction['inference_time']:.3f}s")
        
        # Afficher les d√©tections
        for i, detection in enumerate(prediction['detections'], 1):
            print(f"  {i}. {detection['class_name']}: {detection['confidence']:.3f}")
    
    print()

def example_batch_prediction():
    """Exemple de pr√©diction batch"""
    print("üì¶ Exemple 2: Pr√©diction batch")
    print("-" * 40)
    
    model_path = "models/best.pt"
    if not Path(model_path).exists():
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return
    
    predictor = DentalPredictor(model_path)
    
    # R√©pertoire d'images de test
    test_dir = "data/processed/test/images"
    if not Path(test_dir).exists():
        print(f"‚ùå R√©pertoire non trouv√©: {test_dir}")
        return
    
    print(f"üìÅ Analyse du r√©pertoire: {test_dir}")
    
    # Pr√©diction batch
    results = predictor.batch_predict(test_dir, output_dir="output", conf_threshold=0.25)
    
    if results:
        total_detections = sum(r['total_detections'] for r in results)
        avg_time = sum(r['inference_time'] for r in results) / len(results)
        
        print(f"‚úÖ {len(results)} images analys√©es")
        print(f"üîç Total d√©tections: {total_detections}")
        print(f"‚è±Ô∏è  Temps moyen: {avg_time:.3f}s par image")
    
    print()

def example_custom_thresholds():
    """Exemple avec seuils personnalis√©s"""
    print("üéØ Exemple 3: Seuils personnalis√©s")
    print("-" * 40)
    
    model_path = "models/best.pt"
    if not Path(model_path).exists():
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return
    
    predictor = DentalPredictor(model_path)
    
    test_images = list(Path("data/processed/test/images").glob("*.jpg"))
    if not test_images:
        print("‚ùå Aucune image de test trouv√©e")
        return
    
    test_image = str(test_images[0])
    
    # Test avec diff√©rents seuils
    thresholds = [0.1, 0.25, 0.5, 0.75]
    
    print(f"üì∏ Image: {Path(test_image).name}")
    print("Seuils de confiance:")
    
    for conf in thresholds:
        prediction = predictor.predict_image(test_image, conf_threshold=conf)
        if prediction:
            print(f"  Conf={conf:.2f}: {prediction['total_detections']} d√©tections")
    
    print()

def example_visualization():
    """Exemple de visualisation"""
    print("üé® Exemple 4: Visualisation")
    print("-" * 40)
    
    model_path = "models/best.pt"
    if not Path(model_path).exists():
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return
    
    predictor = DentalPredictor(model_path)
    
    test_images = list(Path("data/processed/test/images").glob("*.jpg"))
    if not test_images:
        print("‚ùå Aucune image de test trouv√©e")
        return
    
    test_image = str(test_images[0])
    
    # Pr√©diction
    prediction = predictor.predict_image(test_image)
    
    if prediction and prediction['detections']:
        # Visualisation
        vis_image = predictor.visualize_predictions(test_image, prediction)
        
        # Afficher avec matplotlib
        plt.figure(figsize=(12, 8))
        plt.imshow(vis_image)
        plt.axis('off')
        plt.title(f"D√©tections sur {Path(test_image).name}")
        plt.show()
        
        # Sauvegarder
        output_path = "output/visualization_example.jpg"
        Path("output").mkdir(exist_ok=True)
        cv2.imwrite(output_path, cv2.cvtColor(vis_image, cv2.COLOR_RGB2BGR))
        print(f"üíæ Visualisation sauvegard√©e: {output_path}")
    
    print()

def example_model_comparison():
    """Exemple de comparaison de mod√®les"""
    print("‚öñÔ∏è  Exemple 5: Comparaison de mod√®les")
    print("-" * 40)
    
    # Mod√®les √† comparer
    models = [
        ("YOLOv8n", "yolov8n.pt"),
        ("YOLOv8s", "yolov8s.pt"),
        ("Entra√Æn√©", "models/best.pt")
    ]
    
    test_images = list(Path("data/processed/test/images").glob("*.jpg"))
    if not test_images:
        print("‚ùå Aucune image de test trouv√©e")
        return
    
    test_image = str(test_images[0])
    print(f"üì∏ Image de test: {Path(test_image).name}")
    
    results = []
    
    for model_name, model_path in models:
        if not Path(model_path).exists():
            print(f"‚ö†Ô∏è  Mod√®le non trouv√©: {model_path}")
            continue
        
        try:
            # Charger le mod√®le
            model = YOLO(model_path)
            
            # Pr√©diction
            import time
            start_time = time.time()
            results_yolo = model(test_image, conf=0.25)
            inference_time = time.time() - start_time
            
            # Compter les d√©tections
            num_detections = 0
            if results_yolo[0].boxes is not None:
                num_detections = len(results_yolo[0].boxes)
            
            results.append({
                'model': model_name,
                'detections': num_detections,
                'time': inference_time
            })
            
            print(f"  {model_name}: {num_detections} d√©tections, {inference_time:.3f}s")
            
        except Exception as e:
            print(f"  ‚ùå Erreur avec {model_name}: {e}")
    
    # Afficher le r√©sum√©
    if results:
        print("\nüìä R√©sum√©:")
        for result in results:
            print(f"  {result['model']}: {result['detections']} d√©tections, {result['time']:.3f}s")
    
    print()

def example_api_usage():
    """Exemple d'utilisation de l'API"""
    print("üåê Exemple 6: Utilisation de l'API")
    print("-" * 40)
    
    import requests
    import json
    
    # URL de l'API (suppos√©e en cours d'ex√©cution)
    api_url = "http://localhost:8000"
    
    try:
        # Test de sant√©
        response = requests.get(f"{api_url}/health", timeout=5)
        if response.status_code == 200:
            health = response.json()
            print(f"‚úÖ API en ligne: {health['status']}")
            print(f"ü§ñ Mod√®le charg√©: {health['model_loaded']}")
        else:
            print(f"‚ùå API non disponible: {response.status_code}")
            return
    except requests.exceptions.RequestException:
        print("‚ùå API non accessible")
        print("üí° Lancez l'API avec: python api/main.py --model models/best.pt")
        return
    
    # Test de pr√©diction
    test_images = list(Path("data/processed/test/images").glob("*.jpg"))
    if not test_images:
        print("‚ùå Aucune image de test trouv√©e")
        return
    
    test_image = test_images[0]
    
    try:
        with open(test_image, 'rb') as f:
            files = {'file': f}
            data = {'confidence': 0.25, 'iou': 0.45}
            
            response = requests.post(
                f"{api_url}/predict",
                files=files,
                data=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Pr√©diction r√©ussie")
                print(f"üîç {result['total_detections']} d√©tection(s)")
                print(f"‚è±Ô∏è  Temps: {result['inference_time']:.3f}s")
                
                for detection in result['detections']:
                    print(f"  - {detection['class_name']}: {detection['confidence']:.3f}")
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                print(response.text)
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print()

def example_export_models():
    """Exemple d'export de mod√®les"""
    print("üì§ Exemple 7: Export de mod√®les")
    print("-" * 40)
    
    model_path = "models/best.pt"
    if not Path(model_path).exists():
        print(f"‚ùå Mod√®le non trouv√©: {model_path}")
        return
    
    try:
        from scripts.export_model import ModelExporter
        
        exporter = ModelExporter(model_path)
        
        # Export ONNX
        onnx_path = exporter.export_onnx("models")
        if onnx_path:
            print(f"‚úÖ ONNX export√©: {onnx_path}")
        
        # Export optimis√©
        opt_path = exporter.optimize_for_inference("models")
        if opt_path:
            print(f"‚úÖ Mod√®le optimis√©: {opt_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur export: {e}")
    
    print()

def main():
    """Fonction principale"""
    print("ü¶∑ Exemples d'utilisation EvaDentalAI")
    print("=" * 50)
    
    # Cr√©er le r√©pertoire de sortie
    Path("output").mkdir(exist_ok=True)
    
    examples = [
        ("Pr√©diction basique", example_basic_prediction),
        ("Pr√©diction batch", example_batch_prediction),
        ("Seuils personnalis√©s", example_custom_thresholds),
        ("Visualisation", example_visualization),
        ("Comparaison mod√®les", example_model_comparison),
        ("Utilisation API", example_api_usage),
        ("Export mod√®les", example_export_models)
    ]
    
    for example_name, example_func in examples:
        try:
            example_func()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Arr√™t demand√© par l'utilisateur")
            break
        except Exception as e:
            print(f"‚ùå Erreur dans {example_name}: {e}")
            continue
    
    print("üéâ Exemples termin√©s!")
    print("üìÅ V√©rifiez le dossier 'output/' pour les r√©sultats")

if __name__ == "__main__":
    main()
